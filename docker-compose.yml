version: '3.8'

services:
  # PostgreSQL Database with performance optimizations
  postgres:
    image: postgres:15-alpine
    container_name: inmobiliario-postgres
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-inmobiliario_db}
      - POSTGRES_USER=${POSTGRES_USER:-inmobiliario_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-inmobiliario_pass}
      - TZ=Europe/Madrid
    volumes:
      - postgres_data_new:/var/lib/postgresql/data
      - ./backend/database_indexes.sql:/docker-entrypoint-initdb.d/indexes.sql
    networks:
      - inmobiliario_network
    ports:
      - "5432:5432"
    command: |
      postgres 
      -c shared_preload_libraries=pg_stat_statements,pg_trgm
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inmobiliario_user} -d ${POSTGRES_DB:-inmobiliario_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    container_name: inmobiliario-redis
    restart: always
    environment:
      - TZ=Europe/Madrid
    command: |
      redis-server 
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - inmobiliario_network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: inmobiliario-backend
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-inmobiliario_db}
      - POSTGRES_USER=${POSTGRES_USER:-inmobiliario_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-inmobiliario_pass}
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - REDIS_URL=redis://redis:6379/0
      - TZ=Europe/Madrid
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USERNAME=your-email@gmail.com
      - SMTP_PASSWORD=your-app-password
      - SMTP_FROM_EMAIL=your-email@gmail.com
      - SMTP_FROM_NAME=Inmobiliario Tools
    networks:
      - inmobiliario_network
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Worker
  celery-worker:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: inmobiliario-celery-worker
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-inmobiliario_db}
      - POSTGRES_USER=${POSTGRES_USER:-inmobiliario_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-inmobiliario_pass}
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - REDIS_URL=redis://redis:6379/0
      - TZ=Europe/Madrid
    networks:
      - inmobiliario_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat Scheduler
  celery-beat:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: inmobiliario-celery-beat
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-inmobiliario_db}
      - POSTGRES_USER=${POSTGRES_USER:-inmobiliario_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-inmobiliario_pass}
      - POSTGRES_HOST=postgres
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - REDIS_URL=redis://redis:6379/0
      - TZ=Europe/Madrid
    networks:
      - inmobiliario_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.celery_app beat --loglevel=info

  # Next.js Frontend
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: inmobiliario-frontend
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:8001
      - TZ=Europe/Madrid
    networks:
      - inmobiliario_network
    ports:
      - "3000:3000"
    depends_on:
      - backend

networks:
  inmobiliario_network:
    driver: bridge

volumes:
  postgres_data_new:
  redis_data:
