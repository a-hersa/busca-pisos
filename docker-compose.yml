services:
  # FastAPI Backend
  backend:
    build: ./backend
    container_name: inmobiliario-backend
    restart: always
    environment:
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - TZ=Europe/Madrid
    networks:
      - flask_network
      - reverse-proxy
    ports:
      - "8000:8000"
    depends_on:
      - postgres
  
  # Legacy Flask Web (keeping for now)
  web:
    image: ahersa/web-inmobiliario:latest
    container_name: inmobiliario-web
    restart: always
    environment:
      - SCRAPINGANT=${SCRAPINGANT}
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TURNSTILE_SITE_KEY=${TURNSTILE_SITE_KEY}
      - TURNSTILE_SECRET_KEY=${TURNSTILE_SECRET_KEY}
      - TZ=Europe/Madrid
      - FLASK_CMD=gunicorn --bind 0.0.0.0:5000 -w 3 app:app  # Comando de producción
    networks:
      - flask_network
      - reverse-proxy

  shiny:
    image: ahersa/shiny-inmobiliario:latest
    container_name: inmobiliario-shiny
    restart: always
    environment:
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Madrid
    networks:
      - flask_network
      - reverse-proxy
  
  scrapy:
    image: ahersa/scrapy-inmobiliario:latest
    container_name: inmobiliario-scrapy
    restart: unless-stopped
    # Esto mantiene el contenedor en ejecución sin hacer nada.
    environment: 
      - SCRAPINGANT=${SCRAPINGANT}
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Madrid
    networks:
      - flask_network
    command: tail -f /dev/null 

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: inmobiliario-redis
    restart: always
    environment:
      - TZ=Europe/Madrid
    networks:
      - flask_network
    ports:
      - "6379:6379"

  # Celery Worker
  celery-worker:
    build: ./backend
    container_name: inmobiliario-celery-worker
    restart: always
    environment:
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - REDIS_URL=redis://redis:6379/0
      - TZ=Europe/Madrid
    networks:
      - flask_network
    depends_on:
      - postgres
      - redis
    volumes:
      - ./scrapy:/app/scrapy:ro
    command: celery -A app.celery_app worker --loglevel=info --queues=scrapy_queue

  postgres:
    build: ./postgres
    container_name: inmobiliario-postgres
    restart: always
    environment:
      - POSTGRES_DB=inmobiliario_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - TZ=Europe/Madrid
    volumes:
      - inmobiliario-tools_postgres_data:/var/lib/postgresql/data
    networks:
      - flask_network
    ports:
      - 5432:5432


networks:
  flask_network: {}
  reverse-proxy:
    external: true

volumes:
  inmobiliario-tools_postgres_data:
    external: true
